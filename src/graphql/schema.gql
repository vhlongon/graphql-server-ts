scalar Date

enum SortFilmsBy {
  releaseDate
  episodeId
}

enum SortStarshipBy {
  id
  class
}

enum SortByNameOrId {
  id
  name
}

enum Gender {
  male
  female
}

input SpeciesInput {
  sortBy: SortByNameOrId = id
  id: Int
}

type Film {
  # starships: [Int]
  # vehicles: [Int]
  # planets: [Int]
  # characters: [Int]
  # species: [Int]
  created: Date
  director: String!
  edited: Date
  episodeId: Int!
  id: Int!
  openingCrawl: String!
  producer: String!
  releaseDate: String!
  title: String!
}

type Planet {
  edited: Date
  created: Date
  climate: [String]
  id: Int!
  surfaceWater: Float
  name: String!
  diameter: Int
  rotationPeriod: Int
  terrain: [String]
  gravity: Float
  orbitalPeriod: Int
  population: Float
}

type Person {
  homeworld: Planet
  birthYear: String
  created: Date
  edited: Date
  eyeColor: String
  gender: Gender
  hairColor: [String]
  height: Float
  id: Int!
  mass: Float
  name: String!
  skinColor: [String]
}

type Species {
  homeworld: Planet
  people: [Person]
  classification: String
  created: Date
  designation: String!
  edited: Date
  eyeColors: [String]
  hairColors: [String]
  id: Int!
  name: String!
  skinColors: [String]
  language: String
  averageLifespan: Int
  averageHeight: Int
}

type Starship {
  id: Int!
  pilots: [Person]
  MGLT: Int
  class: String!
  hyperdriveRating: Float
}

type Query {
  films(sortBy: SortFilmsBy = episodeId): [Film!]
  film(id: Int!): Film
  person(id: Int!): Person
  people(sortBy: SortByNameOrId = id): [Person!]
  planets(sortBy: SortByNameOrId = id): [Planet!]
  planet(id: Int!): Planet
  species(input: SpeciesInput): [Species]
  starship(id: Int!): Starship 
  starships(sortBy: SortStarshipBy = id): [Starship!]
}
